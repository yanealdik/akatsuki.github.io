// diagram.jsx - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import React, { useState, useEffect, useRef } from 'react';
import './diagram.css';

const ProgrammingLearningTree = () => {
  const [expandedNodes, setExpandedNodes] = useState([1]); // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞
  const containerRef = useRef(null);
  const [windowWidth, setWindowWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 0);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };
    
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ä–µ–≤–∞ –æ–±—É—á–µ–Ω–∏—è
  const treeData = {
    1: {
      id: 1,
      title: "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
      description: "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ª–æ–≥–∏–∫–∏",
      technologies: [
        { name: "–ê–ª–≥–æ—Ä–∏—Ç–º—ã", icon: "üß©" },
        { name: "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", icon: "üìä" },
        { name: "–õ–æ–≥–∏–∫–∞", icon: "üß†" }
      ],
      children: [2, 3, 4],
    },
    2: {
      id: 2,
      title: "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
      technologies: [
        { name: "HTML/CSS", icon: "üåê" },
        { name: "JavaScript", icon: "üíª" },
        { name: "React", icon: "‚öõÔ∏è" }
      ],
      children: [5, 6],
    },
    3: {
      id: 3,
      title: "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è iOS –∏ Android",
      technologies: [
        { name: "React Native", icon: "üì±" },
        { name: "Swift", icon: "üçé" },
        { name: "Kotlin", icon: "ü§ñ" }
      ],
      children: [7],
    },
    4: {
      id: 4,
      title: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∏ —Å–∏–º—É–ª—è—Ü–∏–π",
      technologies: [
        { name: "Unity", icon: "üéÆ" },
        { name: "C#", icon: "üéØ" },
        { name: "Unreal Engine", icon: "üé≤" }
      ],
      children: [8],
    },
    5: {
      id: 5,
      title: "Frontend",
      description: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      technologies: [
        { name: "React", icon: "‚öõÔ∏è" },
        { name: "Vue.js", icon: "üü¢" },
        { name: "Angular", icon: "üî¥" }
      ],
      children: [9, 10],
    },
    6: {
      id: 6,
      title: "Backend",
      description: "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
      technologies: [
        { name: "Node.js", icon: "üì¶" },
        { name: "Python Django", icon: "üêç" },
        { name: "SQL", icon: "üóÑÔ∏è" }
      ],
      children: [11, 12],
    },
    7: {
      id: 7,
      title: "–ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
      technologies: [
        { name: "Flutter", icon: "üíô" },
        { name: "React Native", icon: "üì±" },
        { name: "Xamarin", icon: "‚öíÔ∏è" }
      ],
      children: [],
    },
    8: {
      id: 8,
      title: "3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ 3D-–º–æ–¥–µ–ª–µ–π –∏ –∞–Ω–∏–º–∞—Ü–∏–π",
      technologies: [
        { name: "Blender", icon: "üé≠" },
        { name: "Maya", icon: "üèóÔ∏è" },
        { name: "ZBrush", icon: "üñåÔ∏è" }
      ],
      children: [],
    },
    9: {
      id: 9,
      title: "UX/UI –¥–∏–∑–∞–π–Ω",
      description: "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
      technologies: [
        { name: "Figma", icon: "üé®" },
        { name: "Adobe XD", icon: "üìù" },
        { name: "Sketch", icon: "‚úèÔ∏è" }
      ],
      children: [],
    },
    10: {
      id: 10,
      title: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
      description: "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      technologies: [
        { name: "Jest", icon: "üß™" },
        { name: "Cypress", icon: "üß∞" },
        { name: "Selenium", icon: "üîç" }
      ],
      children: [],
    },
    11: {
      id: 11,
      title: "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
      description: "–•—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏",
      technologies: [
        { name: "PostgreSQL", icon: "üêò" },
        { name: "MongoDB", icon: "üçÉ" },
        { name: "Redis", icon: "üîÑ" }
      ],
      children: [],
    },
    12: {
      id: 12,
      title: "DevOps",
      description: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ",
      technologies: [
        { name: "Docker", icon: "üê≥" },
        { name: "Kubernetes", icon: "üö¢" },
        { name: "CI/CD", icon: "üîÑ" }
      ],
      children: [],
    }
  };
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —É–∑–ª–∞
  const toggleNode = (nodeId) => {
    if (expandedNodes.includes(nodeId)) {
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —ç—Ç–æ—Ç —É–∑–µ–ª –∏ –≤—Å–µ –µ–≥–æ –ø–æ—Ç–æ–º–∫–∏
      const nodeToCollapse = [nodeId];
      const collapseDescendants = (parentId) => {
        const node = treeData[parentId];
        if (node && node.children) {
          node.children.forEach(childId => {
            nodeToCollapse.push(childId);
            collapseDescendants(childId);
          });
        }
      };
      collapseDescendants(nodeId);
      setExpandedNodes(prev => prev.filter(id => !nodeToCollapse.includes(id)));
    } else {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —É–∑–µ–ª
      setExpandedNodes(prev => [...prev, nodeId]);
    }
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —É–∑–µ–ª –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
  const isNodeVisible = (nodeId) => {
    // –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º
    if (nodeId === 1) return true;
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
    const parentId = Object.keys(treeData).find(id => 
      treeData[id].children.includes(nodeId)
    );
    
    // –£–∑–µ–ª –≤–∏–¥–∏–º, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ –≤–∏–¥–µ–Ω
    return parentId && expandedNodes.includes(Number(parentId)) && isNodeVisible(Number(parentId));
  };
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ª–∏–Ω–∏–π SVG
  const getConnectionPoints = (parentId, childId) => {
    const parentNode = document.getElementById(`node-${parentId}`);
    const childNode = document.getElementById(`node-${childId}`);
    
    if (!parentNode || !childNode || !containerRef.current) return null;
    
    const parentRect = parentNode.getBoundingClientRect();
    const childRect = childNode.getBoundingClientRect();
    const containerRect = containerRef.current.getBoundingClientRect();
    
    return {
      x1: parentRect.left + parentRect.width / 2 - containerRect.left,
      y1: parentRect.top + parentRect.height - containerRect.top,
      x2: childRect.left + childRect.width / 2 - containerRect.left,
      y2: childRect.top - containerRect.top
    };
  };
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π SVG –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
  const renderConnections = () => {
    const connections = [];
    
    Object.values(treeData).forEach(node => {
      if (expandedNodes.includes(node.id)) {
        node.children.forEach(childId => {
          if (isNodeVisible(childId)) {
            const points = getConnectionPoints(node.id, childId);
            if (points) {
              connections.push(
                <path
                  key={`${node.id}-${childId}`}
                  d={`M${points.x1},${points.y1} C${points.x1},${points.y1 + 50} ${points.x2},${points.y2 - 50} ${points.x2},${points.y2}`}
                  className="diagram-connection"
                />
              );
            }
          }
        });
      }
    });
    
    return (
      <svg className="diagram-svg">
        {connections}
      </svg>
    );
  };
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
  useEffect(() => {
    const updateConnections = () => {
      setWindowWidth(window.innerWidth);
    };
    
    window.addEventListener('resize', updateConnections);
    updateConnections(); // –ù–∞—á–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
    
    return () => {
      window.removeEventListener('resize', updateConnections);
    };
  }, [expandedNodes]);
  
  // –†–µ–Ω–¥–µ—Ä–∏–º –¥–µ—Ä–µ–≤–æ
  return (
    <div className="learning-path-container">
      <div className="learning-path-wrapper">
        <div className="learning-path-header">
          <h1 className="learning-path-title">–ü–£–¢–¨ –ü–†–û–ì–†–ê–ú–ú–ò–°–¢–ê</h1>
          <p className="learning-path-description">
            ¬´–®–∞–≥ –∑–∞ —à–∞–≥–æ–º, —Å—Ç—Ä–æ–∫–∞ –∑–∞ —Å—Ç—Ä–æ–∫–æ–π ‚Äî –Ω–∞ –ø—É—Ç–∏ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è¬ª
          </p>
        </div>
        
        <div className="learning-section-title">–ö–ê–ö –ü–†–û–•–û–î–ò–¢ –û–ë–£–ß–ï–ù–ò–ï?</div>
        
        <div className="learning-tree-container" ref={containerRef}>
          {renderConnections()}
          
          <div className="learning-tree">
            {Object.values(treeData).map(node => (
              isNodeVisible(node.id) && (
                <div
                  key={node.id}
                  id={`node-${node.id}`}
                  className={`learning-node ${expandedNodes.includes(node.id) ? 'expanded' : ''}`}
                  onClick={() => toggleNode(node.id)}
                >
                  <div className="node-header">
                    <h3 className="node-title">{node.title}</h3>
                    {node.children.length > 0 && (
                      <span className="toggle-button">
                        {expandedNodes.includes(node.id) ? '-' : '+'}
                      </span>
                    )}
                  </div>
                  
                  <p className="node-description">{node.description}</p>
                  
                  <div className="tech-tags">
                    {node.technologies.map(tech => (
                      <span key={tech.name} className="tech-tag">
                        <span className="tech-icon">{tech.icon}</span>
                        {tech.name}
                      </span>
                    ))}
                  </div>
                </div>
              )
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProgrammingLearningTree;